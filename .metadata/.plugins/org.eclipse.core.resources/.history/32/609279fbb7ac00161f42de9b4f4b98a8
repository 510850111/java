package me.hekuan;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Set;

public class Snake {

	public static final int UP = -1;
	public static final int DOWN = 1;
	public static final int LEFT = 2;
	public static final int RIGHT = -2;

	private int preDirection;
	private int newDirection;
	
	private boolean life ;
	
	//保存原来的尾巴
	private Point preTail;

	Global global = new Global();
	Food food = new Food();

	// 注册多个监听器
	private Set<SnakeListener> listeners = new HashSet<SnakeListener>();

	// 用集合保存蛇的数据(蛇头,蛇身,蛇尾等)
	// 采用去尾加头的方式来表示蛇的移动
	private LinkedList<Point> body = new LinkedList<Point>();

	public Snake() {
		init();
	}
	
	/**
	 * 初始化贪吃蛇
	 * 1.贪吃蛇的位置出现在界面的最中间,默认移动方向向右.
	 * 2.初始化贪吃蛇的长度为3节:蛇头,蛇身,蛇尾.
	 */
	public void init() {

		life = true;
		
		// 获取整个屏幕最中心的点

		int x = Global.WIDTH / 2;
		int y = Global.HEIGHT / 2;

		// int x = 20;
		// int y = 20;

		for (int i = 0; i < 3; i++) {
			body.addLast(new Point(x--, y));
		}
		newDirection = preDirection = RIGHT;
	}

	/**
	 * 贪吃蛇的移动
	 * 首先判断按键是否让它往相反方向走,如果是,则忽略这个操作.
	 * 移动采用去尾加头的方式.
	 * (已失效)当贪吃蛇的移动超过窗体时,让它出现在另一边.
	 */
	public void move() {
		System.out.println("Snake move");

		// 判断方向是否相反
		if (preDirection + newDirection != 0) {
			preDirection = newDirection;
		}

		// 1.去尾
		preTail =  body.removeLast();

		// 原来蛇头的坐标
		int x = body.getFirst().x;
		int y = body.getFirst().y;

		// 根据蛇的方向来计算新蛇头的坐标
		switch (preDirection) {
		case UP:
			y--;
			if (y <= 0) {
				y = Global.HEIGHT - 1;
			}
			break;
		case DOWN:
			y++;
			if (y >= Global.HEIGHT) {
				y = 1;
			}
			break;
		case LEFT:
			x--;
			if (x <= -1) {
				x = Global.WIDTH;
			}
			break;
		case RIGHT:
			x++;
			if (x >= Global.WIDTH)  {
				x = 0;
			}
			break;

		default:
			break;
		}

		Point newHead = new Point(x, y);

		System.out.println("x=" + x + " y=" + y);

		// 2.加头
		body.addFirst(newHead);
	}

	/**
	 * 准备改变贪吃蛇的方向
	 * @param direction
	 */
	public void changeDirection(int direction) {
		System.out.println("Snake change direction");
		newDirection = direction;
	}

	/**
	 * 当贪吃蛇没有吃到食物时,当前尾巴位置会保存在一个变量中,以便后用.
	 * 当贪吃蛇吃到食物时,给它添加个尾巴(从保存的变量中读取)
	 */
	public void eatFood() {
		System.out.println("Snake eat food");
		
		body.addLast(preTail);
	}

	/**
	 * 判断贪吃蛇是否吃到食物
	 * 默认返回false
	 * @return boolean
	 */
	public boolean isEatBody() {
		System.out.println("Snake isEatBody");
		
		for(int i = 1;i<body.size();i++){
			if (body.get(i).equals(getHead())) {
				return true;
			}
		}
		
		return false;
	}

	/***
	 * 贪吃蛇在吃到自己或者撞墙的时候调用这个函数
	 * 让贪吃蛇死亡,线程会判断life的值,为假就停止调用move方法
	 */
	public void die() {

		life = false;
		
	}

	/**
	 * 画出贪吃蛇自身
	 * @param g
	 */
	public void drawMe(Graphics g) {
		System.out.println("Snake drawMe");
		g.setColor(Color.BLUE);
		
		// 画出所有的坐标
		for (Point point : body) {
			g.fill3DRect(point.x * Global.CELL_SIZE, point.y * Global.CELL_SIZE, Global.CELL_SIZE, Global.CELL_SIZE,
					true);
		}
	}

	/**
	 * 清除屏幕上画的东西
	 * @param g
	 */
	public void clearPrevoiousFilled(Graphics g) {
		g.clearRect(0, 0, 1000, 1000);
	}

	/**
	 * 实现了runnable接口的内部类
	 * 驱动一个线程一直去调用run方法,使得贪吃蛇移动
	 * @author Oscar
	 *
	 */
	private class SnakeDriver implements Runnable {
		private long millis;

		/**
		 * 带参的构造方法,设置重新刷新的时间,单位为毫秒
		 * @param millis
		 */
		public SnakeDriver(long millis) {
			this.setMillis(millis);
			run();
		}

		public void run() {
			while (life) {
				System.out.println("---------------------------");
				
				move();
				isEatBody();
				for (SnakeListener listener : listeners) {
					listener.snakeMoved(Snake.this);
				}
				try {
					Thread.sleep(getMillis());
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}

		public long getMillis() {
			return millis;
		}

		public void setMillis(long millis) {
			this.millis = millis;
		}
	}

	public void addSnakleListener(SnakeListener listener) {
		if (listener != null) {
			this.listeners.add(listener);
		}
	}

	public void start() {
		long millis = 100;
		new Thread(new SnakeDriver(millis));
		System.out.println("-------------------------------");
	}

	public Point getHead() {
		return body.getFirst();
	}
}
